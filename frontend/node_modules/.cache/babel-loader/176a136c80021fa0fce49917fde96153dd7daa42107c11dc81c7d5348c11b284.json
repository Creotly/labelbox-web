{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CHAOS\\\\Documents\\\\GitHub\\\\labelbox-web-app\\\\frontend\\\\src\\\\components\\\\AnnotationScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Annotation from 'react-image-annotation';\nimport '../components/css/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnnotationScreen = () => {\n  _s();\n  const [task, setTask] = useState(null);\n  const [annotations, setAnnotations] = useState([]);\n  const [annotation, setAnnotation] = useState({});\n  const [loading, setLoading] = useState(true); // Set to true initially to show loading message\n  const [error, setError] = useState('');\n  const [initialLoad, setInitialLoad] = useState(true); // State to track if it's the first load\n\n  const fetchTask = () => {\n    axios.get('http://localhost:5000/get-task').then(res => setTask(res.data.task)).catch(() => {\n      setTask(null); // Clear task if fetch fails\n      if (!initialLoad) {\n        setError('Oops, something went wrong. We are trying to get the task for you!');\n      }\n    }).finally(() => {\n      setLoading(false);\n      setInitialLoad(false); // After the initial load, this is no longer the first load\n    });\n  };\n  useEffect(() => {\n    fetchTask();\n  }, []);\n  const saveAnnotations = () => {\n    if (annotations.length === 0) {\n      alert(\"Please add some annotations first.\");\n      return;\n    }\n    setLoading(true);\n    axios.post('http://localhost:5000/submit-annotation', {\n      task_id: task._id,\n      // Fixed key for MongoDB documents\n      annotations\n    }).then(() => {\n      alert('Annotations saved!');\n      setAnnotations([]);\n    }).catch(() => alert('Failed to save annotations. Please try again.')).finally(() => setLoading(false));\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading task...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 25\n  }, this); // Neutral loading message\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this) // Show error message if it is not the initial load\n    : task ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Annotation, {\n        src: task.image_url,\n        annotations: annotations,\n        value: annotation,\n        onChange: setAnnotation,\n        onSubmit: newAnnotation => {\n          setAnnotations([...annotations, newAnnotation]);\n          setAnnotation({});\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveAnnotations,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this) // Message when no tasks are found\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(AnnotationScreen, \"r00pxi7V+CUVWp1syrnKxpAG8b8=\");\n_c = AnnotationScreen;\nexport default AnnotationScreen;\nvar _c;\n$RefreshReg$(_c, \"AnnotationScreen\");","map":{"version":3,"names":["React","useState","useEffect","axios","Annotation","jsxDEV","_jsxDEV","AnnotationScreen","_s","task","setTask","annotations","setAnnotations","annotation","setAnnotation","loading","setLoading","error","setError","initialLoad","setInitialLoad","fetchTask","get","then","res","data","catch","finally","saveAnnotations","length","alert","post","task_id","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","src","image_url","value","onChange","onSubmit","newAnnotation","onClick","_c","$RefreshReg$"],"sources":["C:/Users/CHAOS/Documents/GitHub/labelbox-web-app/frontend/src/components/AnnotationScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Annotation from 'react-image-annotation';\r\nimport '../components/css/styles.css';\r\n\r\nconst AnnotationScreen = () => {\r\n    const [task, setTask] = useState(null);\r\n    const [annotations, setAnnotations] = useState([]);\r\n    const [annotation, setAnnotation] = useState({});\r\n    const [loading, setLoading] = useState(true); // Set to true initially to show loading message\r\n    const [error, setError] = useState('');\r\n    const [initialLoad, setInitialLoad] = useState(true); // State to track if it's the first load\r\n\r\n    const fetchTask = () => {\r\n        axios.get('http://localhost:5000/get-task')\r\n            .then((res) => setTask(res.data.task))\r\n            .catch(() => {\r\n                setTask(null); // Clear task if fetch fails\r\n                if (!initialLoad) {\r\n                    setError('Oops, something went wrong. We are trying to get the task for you!');\r\n                }\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n                setInitialLoad(false); // After the initial load, this is no longer the first load\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTask();\r\n    }, []);\r\n\r\n    const saveAnnotations = () => {\r\n        if (annotations.length === 0) {\r\n            alert(\"Please add some annotations first.\");\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        axios.post('http://localhost:5000/submit-annotation', {\r\n            task_id: task._id, // Fixed key for MongoDB documents\r\n            annotations\r\n        })\r\n        .then(() => {\r\n            alert('Annotations saved!');\r\n            setAnnotations([]);\r\n        })\r\n        .catch(() => alert('Failed to save annotations. Please try again.'))\r\n        .finally(() => setLoading(false));\r\n    };\r\n\r\n    if (loading) return <p>Loading task...</p>; // Neutral loading message\r\n\r\n    return (\r\n        <div>\r\n            {error ? (\r\n                <p>{error}</p> // Show error message if it is not the initial load\r\n            ) : task ? (\r\n                <div>\r\n                    <Annotation\r\n                        src={task.image_url}\r\n                        annotations={annotations}\r\n                        value={annotation}\r\n                        onChange={setAnnotation}\r\n                        onSubmit={(newAnnotation) => {\r\n                            setAnnotations([...annotations, newAnnotation]);\r\n                            setAnnotation({});\r\n                        }}\r\n                    />\r\n                    <button onClick={saveAnnotations}>Save</button>\r\n                </div>\r\n            ) : (\r\n                <p>No tasks available.</p> // Message when no tasks are found\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnnotationScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}